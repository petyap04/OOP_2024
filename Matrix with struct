#include <iostream>
int** createMatrix(size_t rows, size_t colls) 
{
	int** mtx = new int* [rows];
	for (size_t i = 0; i < rows; i++) 
	{
		mtx[i] = new int[colls];
	}
	return mtx;
}
struct Matrix
{
	size_t rows;
	size_t colls;
	int** mtx = createMatrix(rows, colls);
};
void readMatrix(Matrix& mtx)
{
	for (size_t i = 0; i < mtx.rows; i++) 
	{
		for (size_t j = 0; j < mtx.colls; i++) 
		{
			std::cin >> mtx.mtx[i][j];
		}
	}
}
Matrix& transp(Matrix& trans, const Matrix& mtx) 
{
	trans.rows = mtx.colls;
	trans.colls = mtx.rows;
	for (size_t i = 0; i < trans.rows; i++) 
	{
		for (size_t j = 0; j < trans.colls; i++) 
		{
			trans.mtx[i][j]=mtx.mtx[j][i];
		}
	}
	return trans;
}
void printMatrix(const Matrix& mtx)
{
	for (size_t i = 0; i < mtx.rows; i++) 
	{
		for (size_t j = 0; j < mtx.colls; i++) 
		{
			std::cout << mtx.mtx[i][j];
		}
	}
}

int main()
{
  Matrix mtx;
	std::cin >> mtx.rows >> mtx.colls;
	readMatrix(mtx);
	Matrix trans;
	transp(trans, mtx);
	printMatrix(trans);
}
